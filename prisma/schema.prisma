// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Restaurant {
  id          String    @id @default(cuid())
  name        String
  rate        Float
  phoneNumber String
  address     String
  location    Location?
  products    Product[]
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Location {
  id           String     @id @default(cuid())
  latitude     Float
  longitude    Float
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId String     @unique
}

model Product {
  id              String      @id @default(cuid())
  title           String
  description     String
  originalPrice   Int
  discountedPrice Int
  discount        Int
  pickupStart     String
  pickupEnd       String
  quantity        Int
  images          Images?
  restaurant      Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId    String
  orderItems      OrderItem[]
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  sensitivities   FoodSensitivity[]
}

model Images {
  id        String  @id @default(cuid())
  product   String
  thumbnail String
  Product   Product @relation(fields: [productId], references: [id])
  productId String  @unique
}

model Order {
  id           String      @id @default(cuid())
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  items        OrderItem[]
  status       OrderStatus @default(PENDING)
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  restaurantId String
  payment      Payment?
  pickupStart  String
  pickupEnd    String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  price     Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
}

model Payment {
  id      String        @id @default(cuid())
  method  PaymentMethod
  status  PaymentStatus @default(PENDING)
  amount  Int
  order   Order         @relation(fields: [orderId], references: [id])
  orderId String        @unique
}

enum OrderStatus {
  PENDING
  CONFIRMED
  READY
  COMPLETED
  CANCELLED
}

enum PaymentMethod {
  BANK
  WALLET
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

// User Management
model User {
  id        String    @id @default(cuid())
  email     String    @unique
  phone     String    @unique
  name      String?
  addresses Address[]
  orders    Order[]
  wallet    Wallet?
  tickets   Ticket[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id        String   @id @default(cuid())
  title     String // e.g., "Home", "Work"
  address   String
  latitude  Float
  longitude Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Wallet {
  id           String        @id @default(cuid())
  balance      Int           @default(0)
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @unique
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  id        String          @id @default(cuid())
  amount    Int
  type      TransactionType
  wallet    Wallet          @relation(fields: [walletId], references: [id])
  walletId  String
  createdAt DateTime        @default(now())
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
  REFUND
}

// Support System
model Ticket {
  id          String       @id @default(cuid())
  subject     String
  description String
  status      TicketStatus @default(OPEN)
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

// Discount System
model DiscountCode {
  id        String   @id @default(cuid())
  code      String   @unique
  discount  Float    // Stored as decimal (e.g., 0.15 for 15%)
  startDate DateTime @default(now())
  endDate   DateTime?
  maxUses   Int?
  usedCount Int      @default(0)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FoodSensitivity {
  id          String    @id @default(cuid())
  name        String
  description String?
  products    Product[] // Many-to-many relation with products
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
